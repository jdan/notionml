(* Text stuff *)
type color = [
  | Default <json name="default">
]

type annotations = {
  bold: bool;
  italic: bool;
  strikethrough: bool;
  underline: bool;
  code: bool;
  color: color;
}

type link = {
  url: string;
}

type text_content = {
  content: string;
  ?link: link option;
}

type text = {
  text: text_content;
  annotations: annotations;
  plain_text: string;
  ?href: string option;
}

type text_entry = [
  | Text <json name="text"> of text
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

(* Paragraphs *)
type paragraph_content = {
  text: text_entry list;
}

type paragraph = {
  paragraph: paragraph_content;
  id: string;
  created_time: string;
  has_children: bool;
  archived: bool;
}

(* Images *)
type file = {
  url: string;
  expiry_time: string;
}

type image_file = {
  caption: text_entry list;
  file: file;
}

type external_ = {
  url: string;
}

type image_external = {
  caption: text_entry list;
  external_ <json name="external">: external_;
}

type image_content = [
  | Image_file <json name="file"> of image_file
  | Image_external <json name="external"> of image_external
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type image = {
  image: image_content;
  id: string;
  created_time: string;
  has_children: bool;
  archived: bool;
}

(* Quotes *)
type quote_content = {
  text: text_entry list;
}

type quote = {
  quote: quote_content;
  id: string;
  created_time: string;
  has_children: bool;
  archived: bool;
}

(* All together now *)
type block = [
  | Paragraph <json name="paragraph"> of paragraph
  | Image <json name="image"> of image
  | Quote <json name="quote"> of quote
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type results = {
  results: block list;
}
